import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Star, Clock, CheckCircle, Map } from 'lucide-react';
import toast, { Toaster } from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import './Projects.css';

const getBadgeClass = (difficulty) => {
  switch (difficulty) {
    case 'Beginner':
      return 'bg-success text-white';
    case 'Intermediate':
      return 'bg-warning text-dark';
    case 'Advanced':
      return 'bg-danger text-white';
    default:
      return 'bg-secondary text-white';
  }
};

const Projects = () => {
  const [batches, setBatches] = useState([]);
  const token = localStorage.getItem('cookie');
  const navigate = useNavigate();
useEffect(() => {
  if (!token) {
    toast.error('Please login to access projects.');
    navigate('/login');
  }
}, [token]);
  useEffect(() => {
    fetchBatches();
  }, []);

  const fetchBatches = async () => {
    try {
      const res = await axios.get(`${import.meta.env.VITE_APP}/api/tasks`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setBatches(res.data.batches || []);
    } catch {
      toast.error('Failed to fetch batches');
    }
  };

  const handleComplete = async (batchId, projectId) => {
    try {
      await axios.patch(
        // `http://localhost:3000/api/batches/${batchId}/projects/${projectId}/complete`,
        `${import.meta.env.VITE_APP}/api/batches/${batchId}/projects/${projectId}/complete`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      toast.success('âœ… Project marked as complete!');
      fetchBatches();
    } catch (err) {
      toast.error('Failed to mark complete');
      console.error(err);
    }
  };

  const determineDifficulty = (tasks = []) => {
    if (tasks.some((task) => task.includes('**Advanced:**'))) return 'Advanced';
    if (tasks.some((task) => task.includes('**Intermediate:**'))) return 'Intermediate';
    if (tasks.some((task) => task.includes('**Beginner:**'))) return 'Beginner';
    return 'Intermediate';
  };

  const getRandomRating = () => {
    return (Math.random() * (5 - 3.5) + 3.5).toFixed(1);
  };

  return (
    <div className="container py-5">
      <Toaster />
      <div className="text-center mb-5">
        <h2 className="fw-bold text-info">ðŸŽ¯ Project Explorer</h2>
        <p className="text-secondary">Projects generated by AI, tailored to your learning prompts</p>
      </div>

      {batches.length > 0 ? (
        batches.map((batch, bIdx) => (
          <div key={batch._id} className="mb-4">
            <h5 className="mb-3 text-light">
              Batch {bIdx + 1} â€“ Progress: {batch.progressPercent?.toFixed(0)}%
            </h5>
            <div className="row g-4">
              {batch.projects.map((project, i) => {
                let difficulty = determineDifficulty(project.tasks);
                if (i === 0) difficulty = 'Beginner';
                else if (i === 1) difficulty = 'Intermediate';
                else if (i === 2) difficulty = 'Advanced';
                const rating = getRandomRating();

                return (
                  <div className="col-md-6 col-lg-4 my-4" key={project._id}>
                    <div className="card border-0 project-glow h-100">
                      <div className="card-body d-flex flex-column">
                        <div className="d-flex justify-content-between align-items-start mb-2">
                          <h5 className="fw-bold text-white">
                            {project.title}
                            {project.completed && (
                              <span className="badge bg-success ms-2">Done</span>
                            )}
                          </h5>
                          <span className="d-flex align-items-center text-warning fw-semibold">
                            <Star size={16} className="me-1 fill-warning" />
                            {rating}
                          </span>
                        </div>

                        <p className="small text-light">
                          {project.description || 'No description provided.'}
                        </p>

                        <div className="d-flex justify-content-between align-items-center mb-3">
                          <span className={`badge ${getBadgeClass(difficulty)}`}>
                            {difficulty}
                          </span>
                          <small className="text-muted d-flex align-items-center">
                            <Clock size={14} className="me-1" />
                            {project.duration || '4-6 weeks'}
                          </small>
                        </div>

                        <div className="mb-3">
                          {(project.technologies || []).map((tech, j) => (
                            <span key={j} className="badge bg-light border text-dark me-1 mb-1">
                              {tech}
                            </span>
                          ))}
                        </div>

                        <div className="mt-auto d-flex gap-2">
                          <button
                            className="btn btn-outline-primary w-50 d-flex align-items-center justify-content-center gap-2"
                            onClick={() => navigate('/roadmaps')}
                          >
                            <Map size={16} />
                            Start Roadmap
                          </button>

                          <button
                            className="btn btn-success w-50 d-flex align-items-center justify-content-center gap-2"
                            onClick={() => handleComplete(batch._id, project._id)}
                            disabled={project.completed}
                          >
                            <CheckCircle size={16} />
                            {project.completed ? 'Completed' : 'Mark Complete'}
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))
      ) : (
        <p className="text-center text-muted">No projects found. Generate some to get started!</p>
      )}
    </div>
  );
};

export default Projects;
